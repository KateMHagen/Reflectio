// This is your Prisma schema file,
// `npx prisma db push` to push to database
// `npx prisma studio` to see simple interface for the database
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id // Clerk uses string for id
  username String @unique
  avatar String? // ? means its optional
  name String?
  surname String?
  createdAt DateTime @default(now())
  posts Post[]
  favorites Favorite[]
  friends Friend[] @relation("UserFriend")
  friendRequestsSent FriendRequest[] @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestsReceived")
  blocks Block[] @relation("BlocksSent")
  blockedBy Block[] @relation("BlocksReceived")
}

model Post {
  id Int @id @default(autoincrement())
  desc String?
  img String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship between Post and User
  userId String
  favorites Favorite[]
}

model Favorite {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship between Favorite and User
  userId String
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade) // Relationship between Favorite and Post
  postId Int?
}

model Friend {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friend User @relation("UserFriend", fields: [friendId], references: [id], onDelete: Cascade) // Relationship between Friend and User
  friendId String
}

model FriendRequest {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender User @relation("FriendRequestsSent", fields: [senderId], references: [id], onDelete: Cascade) // Relationship between sender friend request and User
  senderId String
  receiver User @relation("FriendRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade) // Relationship between receiver friend request and User
  receiverId String
  @@unique([senderId, receiverId])
}

model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blocker User @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade) // Relationship between sender friend request and User
  blockerId String
  blocked User @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade) // Relationship between receiver friend request and User
  blockedId String
  @@unique([blockerId, blockedId])
}

